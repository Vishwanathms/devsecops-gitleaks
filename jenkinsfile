pipeline {
    agent {
        label 'vish-security-agent'
    }

    environment {
        VAULT_ADDR = 'http://34.228.140.38:8400/'
    }

    stages {
        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    # Install gitleaks if not present
                    if ! command -v gitleaks &> /dev/null; then
                        echo "Installing Gitleaks..."
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi
                    # Run gitleaks detect even if from non commited codes


                    echo "üîç Running Gitleaks scan..."
                    set +e  # temporarily disable fail-fast
                    gitleaks detect --source python_app --no-git --verbose --report-path gitleaks-report.json 
                    result=$?  # capture exit status
                    set -e  # re-enable fail-fast

                if [ "$result" -ne 0 ]; then
                    echo "‚ùå Gitleaks found leaks (exit code $result)"
                    exit 1
                else
                    echo "‚úÖ No leaks found."
                fi
                '''
            }
        }
        stage('Fetch Secret from Vault') {
            steps {
                script {
                    withVault([vaultSecrets: [
                        [path: 'secret/app_secret', secretValues: [[envVar: 'APP1', vaultKey: 'app1']
                        ]]
                    ]]) {

                    sh '''
                    docker rm -f py-app || true
                    docker rmi -f flask-vault-app:latest || true
                    docker build -t flask-vault-app:latest .
                    docker run -d -p 8005:5000 -e API_KEY=$APP1 --name py-app flask-vault-app:latest
                    '''
                    }
                }
            }
        }
        stage('OWASP ZAP Scan') {
 
            steps {
                script {
                    sh '''#!/bin/bash
                        set -eux

                        # ====== Wait for app to come online ======
                        echo "Waiting for app to start..."
                        for i in {1..10}; do
                            if curl -s http://34.228.140.38:8005 >/dev/null; then
                                echo "App is up!"
                                break
                            fi
                            sleep 5
                        done

                        # ====== Run OWASP ZAP Baseline Scan using Docker ======
                        echo "Running OWASP ZAP Scan..."
                        docker run --rm -v $(pwd):/zap/wrk/:rw \
                            --network="host" \
                            ghcr.io/zaproxy/zaproxy:stable \
                            zap-baseline.py -t http://34.228.140.38:8005 -r zap_report.html

                        # ====== Collect the report ======
                        mkdir -p reports
                        mv zap_report.html reports/

        # ===== Quality Gate: Fail only if FAIL-NEW > 0 =====
        FAIL_COUNT=$(grep -oE "FAIL-NEW: [0-9]+" reports/zap_report.html | awk '{print $2}' || echo 0)

        if [ "$FAIL_COUNT" -gt 0 ]; then
            echo "‚ùå ZAP found $FAIL_COUNT high severity vulnerabilities!"
            exit 1
        else
            echo "‚úÖ No high severity vulnerabilities found. Proceeding..."
        fi
                    '''
                }
                post {
                always {
                    archiveArtifacts artifacts: 'reports/zap_report.html', fingerprint: true
                }
                success {
                    echo '‚úÖ ZAP scan completed successfully ‚Äî no critical vulnerabilities.'
                }
                failure {
                    echo '‚ùå Build failed due to critical ZAP findings.'
                }
            }
        }
    }
    }
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
